{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "DynamicNetwork.svelte",
    "NetworkOverview.svelte"
  ],
  "sourcesContent": [
    "<script type='ts'>import ElGrapho from 'elgrapho';\r\nimport { onMount } from 'svelte';\r\nexport let trans = undefined;\r\nlet terms = [\r\n    'Day',\r\n    'Week',\r\n    'Month',\r\n    'Year'\r\n];\r\nlet term = 'Day';\r\nlet validAccounts;\r\nlet validTrans;\r\nlet currentTime = undefined;\r\nlet beforeTime = undefined;\r\nlet toShow = ['CB2177', 'CB793', 'CB1179', 'CB1382', 'CB5270'];\r\nvar Bank;\r\n(function (Bank) {\r\n    Bank[Bank[\"CB\"] = 0] = \"CB\";\r\n    Bank[Bank[\"YZ\"] = 1] = \"YZ\";\r\n    Bank[Bank[\"IJ\"] = 2] = \"IJ\";\r\n    Bank[Bank[\"ST\"] = 3] = \"ST\";\r\n    Bank[Bank[\"UV\"] = 4] = \"UV\";\r\n    Bank[Bank[\"MN\"] = 5] = \"MN\";\r\n    Bank[Bank[\"OP\"] = 6] = \"OP\";\r\n    Bank[Bank[\"AB\"] = 7] = \"AB\";\r\n    Bank[Bank[\"CD\"] = 8] = \"CD\";\r\n    Bank[Bank[\"WX\"] = 9] = \"WX\";\r\n    Bank[Bank[\"GH\"] = 10] = \"GH\";\r\n    Bank[Bank[\"EF\"] = 11] = \"EF\";\r\n    Bank[Bank[\"QR\"] = 12] = \"QR\";\r\n    Bank[Bank[\"KL\"] = 13] = \"KL\";\r\n    Bank[Bank[\"\"] = 14] = \"\";\r\n})(Bank || (Bank = {}));\r\nlet container;\r\nlet currentData;\r\nlet model = {\r\n    nodes: [],\r\n    edges: []\r\n};\r\n$: if (currentTime != undefined) {\r\n    let newTrans = trans.filter(d => (beforeTime < parseInt(d.date, 10) && parseInt(d.date, 10) <= currentTime)\r\n        && (toShow.includes(d.from) || toShow.includes(d.to)));\r\n    newTrans.forEach(d => {\r\n        if (!toShow.includes(d.from)) {\r\n            toShow.push(d.from);\r\n            model.nodes.push({\r\n                group: Bank[d.from.slice(0, 2)],\r\n                label: d.from\r\n            });\r\n        }\r\n        if (!toShow.includes(d.to)) {\r\n            toShow.push(d.to);\r\n            model.nodes.push({\r\n                group: Bank[d.to.slice(0, 2)],\r\n                label: d.to\r\n            });\r\n        }\r\n        model.edges.push({\r\n            from: toShow.indexOf(d.from),\r\n            to: toShow.indexOf(d.to)\r\n        });\r\n    });\r\n    console.log(model);\r\n    let graph = new ElGrapho({\r\n        container: container,\r\n        model: ElGrapho.layouts.Chord(model),\r\n        width: 800,\r\n        height: 600\r\n    });\r\n}\r\nonMount(() => {\r\n    //console.log(accounts)\r\n    console.log(trans);\r\n    beforeTime = 930104;\r\n    currentTime = 930105;\r\n    toShow.forEach(d => {\r\n        model.nodes.push({\r\n            group: Bank[d.slice(0, 2)],\r\n            label: d\r\n        });\r\n    });\r\n});\r\nfunction onProgress() {\r\n    beforeTime = currentTime;\r\n    if (term == 'Day') {\r\n        currentTime += 1;\r\n    }\r\n    else if (term == 'Week') {\r\n        currentTime += 7;\r\n    }\r\n    else if (term == 'Month') {\r\n        currentTime += 100;\r\n        if ((currentTime % 10000) / 100 >= 13) {\r\n            currentTime += 10000;\r\n            currentTime -= 1200;\r\n        }\r\n    }\r\n    else {\r\n        currentTime += 10000;\r\n    }\r\n    console.log(currentTime);\r\n}\r\n</script>\r\n    \r\n\r\n<style>\r\n    .container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n</style>\r\n<div>\r\n    <button on:click={onProgress}> Progress </button>\r\n    {#each terms as t}\r\n    <label>\r\n        <input type=radio bind:group={term} value={t}>\r\n        {t}\r\n    </label>\r\n    {/each}\r\n    <div bind:this={container} id=\"network-container\" class=\"container\" />\r\n</div>\r\n\r\n",
    "<script type='ts'>import ElGrapho from 'elgrapho';\r\nimport { onMount } from 'svelte';\r\nexport let trans = undefined;\r\nlet validAccounts;\r\nlet validTrans;\r\nvar Bank;\r\n(function (Bank) {\r\n    Bank[Bank[\"CB\"] = 0] = \"CB\";\r\n    Bank[Bank[\"YZ\"] = 1] = \"YZ\";\r\n    Bank[Bank[\"IJ\"] = 2] = \"IJ\";\r\n    Bank[Bank[\"ST\"] = 3] = \"ST\";\r\n    Bank[Bank[\"UV\"] = 4] = \"UV\";\r\n    Bank[Bank[\"MN\"] = 5] = \"MN\";\r\n    Bank[Bank[\"OP\"] = 6] = \"OP\";\r\n    Bank[Bank[\"AB\"] = 7] = \"AB\";\r\n    Bank[Bank[\"CD\"] = 8] = \"CD\";\r\n    Bank[Bank[\"WX\"] = 9] = \"WX\";\r\n    Bank[Bank[\"GH\"] = 10] = \"GH\";\r\n    Bank[Bank[\"EF\"] = 11] = \"EF\";\r\n    Bank[Bank[\"QR\"] = 12] = \"QR\";\r\n    Bank[Bank[\"KL\"] = 13] = \"KL\";\r\n    Bank[Bank[\"\"] = 14] = \"\";\r\n})(Bank || (Bank = {}));\r\nlet graph;\r\nlet container;\r\nlet currentData;\r\nlet model = {\r\n    nodes: [],\r\n    edges: []\r\n};\r\nfunction spreadNodes() {\r\n    validAccounts.forEach(va => {\r\n        model.nodes.push({\r\n            group: Bank[va.slice(0, 2)],\r\n        });\r\n    });\r\n    trans.forEach(tr => {\r\n        model.edges.push({\r\n            from: validAccounts.indexOf(tr.from),\r\n            to: validAccounts.indexOf(tr.to)\r\n        });\r\n    });\r\n    console.log(model);\r\n    let graph = new ElGrapho({\r\n        container: container,\r\n        model: ElGrapho.layouts.Cluster(model),\r\n        width: 1000,\r\n        height: 800,\r\n        debug: false,\r\n        nodeSize: 0.1,\r\n        edgeSize: 0.5,\r\n        //darkMode: true,\r\n        //glowBlend: 0.5,\r\n        nodeOutline: false\r\n    });\r\n    console.log('graph dones');\r\n}\r\nonMount(() => {\r\n    //console.log(accounts)\r\n    console.log(trans);\r\n    validAccounts = [];\r\n    trans.forEach(tr => {\r\n        if (!validAccounts.includes(tr.from)) {\r\n            validAccounts.push(tr.from);\r\n        }\r\n        if (!validAccounts.includes(tr.to)) {\r\n            validAccounts.push(tr.to);\r\n        }\r\n    });\r\n    spreadNodes();\r\n});\r\n</script>\r\n    \r\n\r\n<style>\r\n    .container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n</style>\r\n<div>\r\n    <div bind:this={container} id=\"overview-container\" class=\"container\" />\r\n</div>\r\n\r\n"
  ],
  "names": [],
  "mappings": "AA0GI,UAAU,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC;AClCD,UAAU,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC"
}